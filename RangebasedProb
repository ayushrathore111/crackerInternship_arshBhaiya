Given an integer array nums, handle multiple queries of the following type:

Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
// int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).

Input sample:
["NumArray", "sumRange", "sumRange", "sumRange"]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
Output
[null, 1, -1, -3]

Explanation
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1
numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1
numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3

Solution: 

class NumArray {
public:
    vector<int>NumArr;
    NumArray(vector<int>& nums) {
        NumArr= nums;
    }
    
    int sumRange(int left, int right) {
        int sum =0;
        for(int i=left;i<=right;i++){
            sum+=NumArr[i];
        }
        return sum;
    }
};

solution 2: segment tree
vector<int> segmentTree;
    int n;
    NumArray(vector<int>& nums) {
        n=nums.size()-1;
        segmentTree.resize((n+1)*4,0); 
        constructSegmentTree(nums,0,n,0);
    }
    
    int sumRange(int left, int right) {
        return getSumRange(left,right,0,n,0);
    }
    int getSumRange(int left,int right,int start,int end,int currentIndex){
        
        //no overlapping condition
        if(end<left || start>right || start>end) return 0;

        //complete overlapping condition
        if(start >= left && end <= right) return segmentTree[currentIndex];

        //partial overlapping condition
        int mid=start+(end-start)/2;

        int leftCall=getSumRange(left,right,start,mid,2*currentIndex+1);
        int rightCall=getSumRange(left,right,mid+1,end,2*currentIndex+2);

        return leftCall+rightCall;
    }
    void constructSegmentTree(vector<int>& nums,int start,int end,int currentIndex){
        if(start>end) return;
        if(start==end){
            segmentTree[currentIndex]=nums[start];
            return;
        }
        int mid=start+(end-start)/2;
        constructSegmentTree(nums,start,mid,2*currentIndex+1);
        constructSegmentTree(nums,mid+1,end,2*currentIndex+2);

        segmentTree[currentIndex]=segmentTree[2*currentIndex+1]+segmentTree[2*currentIndex+2]; //calculating the sum recursively.
        return;
    }
};
